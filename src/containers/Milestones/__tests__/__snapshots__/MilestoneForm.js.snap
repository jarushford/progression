// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Milestone Form MilestoneForm Component should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <MilestoneForm
    addMilestone={[MockFunction]}
    project={2}
    user={
      Object {
        "email": "chompy@yahoo.com",
        "id": 4,
        "name": "T-Rex",
        "password": "smallarms",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h2>
          ADD MILESTONE
        </h2>,
        <textarea
          className="milestone-caption"
          maxLength="200"
          name="caption"
          onChange={[Function]}
          placeholder="caption"
          value=""
        />,
        <button>
          Add Milestone
        </button>,
      ],
      "className": "milestone-form",
      "onSubmit": [Function],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "ADD MILESTONE",
        },
        "ref": null,
        "rendered": "ADD MILESTONE",
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "className": "milestone-caption",
          "maxLength": "200",
          "name": "caption",
          "onChange": [Function],
          "placeholder": "caption",
          "value": "",
        },
        "ref": null,
        "rendered": null,
        "type": "textarea",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Add Milestone",
        },
        "ref": null,
        "rendered": "Add Milestone",
        "type": "button",
      },
    ],
    "type": "form",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h2>
            ADD MILESTONE
          </h2>,
          <textarea
            className="milestone-caption"
            maxLength="200"
            name="caption"
            onChange={[Function]}
            placeholder="caption"
            value=""
          />,
          <button>
            Add Milestone
          </button>,
        ],
        "className": "milestone-form",
        "onSubmit": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "ADD MILESTONE",
          },
          "ref": null,
          "rendered": "ADD MILESTONE",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "milestone-caption",
            "maxLength": "200",
            "name": "caption",
            "onChange": [Function],
            "placeholder": "caption",
            "value": "",
          },
          "ref": null,
          "rendered": null,
          "type": "textarea",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Add Milestone",
          },
          "ref": null,
          "rendered": "Add Milestone",
          "type": "button",
        },
      ],
      "type": "form",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
